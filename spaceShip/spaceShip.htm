<!DOCTYPE html><html lang="jp"><head><meta charset="utf-8"><title>WebGL Demo</title>
<link rel="stylesheet"		type="text/css"		href="./styleSheet.css"></link>
<script id="library"		type="text/javascript"	src="./myLib.js"></script>
<script id="calculationXYZ"	type="text/javascript"	src="./accumeMotionsXYZ.js"></script>
<script id="matrix"		type="text/javascript"	src="./myMatrix.js"></script>
<script id="color"		type="text/javascript"	src="./myColor.js"></script>
<script id="class"		type="text/javascript"	src="./myClass.js"></script>
<script id="shape"		type="text/javascript"	src="./myGLShape.js"></script>
<script id="motions"		type="text/javascript"	src="./accumeMotions.js"></script>
<script id="textures"		type="text/javascript"	src="./myTextures.js"></script>






<!--******************************* SHADER PROGMRAMS *****************************************************-->
<!--Fragment shader-->
<script id="shader-fs" type="x-shader/x-fragment">
//○	varying lowp vec4 vColor;	//as same as vertex shader
	varying highp vec4 vColor;//●	//as same as vertex shader
	varying highp vec2 vTextureCoord;//as same as vertex shader
	varying highp vec3 vNTimesEachRGB;//as same as vertex shader

	uniform mediump float uBrightness;
	uniform mediump float uAlpha;

	uniform sampler2D uSampler;//common variable between shader and js

	void main(void) {
//x		gl_FragColor = texture2D(uSampler,vec2(vTextureCoord.s,vTextureCoord.t));
//		gl_FragColor = texture2D(uSampler,vTextureCoord);//mediump型
//		gl_FragColor = vColor;

		//uSamplerの数字とgl.TEXT0の数字は共通？

		mediump vec4 texelColor = texture2D(uSampler,vTextureCoord);//ja version
//?		highp   vec4 texelColor = texture2D(uSampler,vTextureCoord);//en version
		gl_FragColor = vec4(uBrightness)*vec4(texelColor.rgb * vNTimesEachRGB,uAlpha*texelColor.a);

	}
</script>





<!--Vertex shader-->
<script id="shader-vs" type="x-shader/x-vertex">

	//'attribute' this type is used in vertex shader only.This type is assigned on buffers defined in js
	attribute vec3 aVertexNormal;//x y z
	attribute vec3 aVertexPosition;//x y z
	attribute vec4 aVertexColor;//R G B Alpha
	attribute vec2 aTextureCoord;//x y

	//The type of 'uniform' mainly matrices receipter from js
	uniform mat4 uModelViewMatrixInversedTransposed;
	uniform mat4 uModelViewMatrix;
	uniform mat4 uProjectionMatrix;
	uniform mat4 uManipulatedRotationMatrix;

//●
	uniform float uBaseLight;// 0.0-1.0 ?


	uniform float uPointSizeFloat;//a float value

//○	varying lowp vec4 vColor;
//○	varying lowp vec2 vTextureCoord;
	varying highp vec4 vColor;
	varying highp vec2 vTextureCoord;
	varying highp vec3 vNTimesEachRGB;


	void main(void) {
		gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition,1.0);
		gl_PointSize = uPointSizeFloat;
		vColor = aVertexColor;
		vTextureCoord = aTextureCoord;

		//ambient light
		highp vec3 ambientLight = vec3(0.1,0.1,0.1);//This is not the direction but the intensity of color.It does not have relationship with Normal Vector in vertex data.It relates with only 'gl_Color'.

		//compute a new position of a normal vector and modify the direction slightly by being magnified.
		highp vec4 transformedNormal = uModelViewMatrixInversedTransposed * vec4(aVertexNormal,1.0);

		//compute a new position of the directional light
		highp vec3 directionalVector = normalize(vec3(0.85,0.8,0.75));//the direction of light at the first time
		highp vec3 directionalVectorNew = vec3(2.0) * normalize(uManipulatedRotationMatrix * vec4(directionalVector,1.0)).xyz;//brightness*2//a new position of the light

		//compute the brightness of the face using a new normal vector and using a new light direction
		highp float quantity = max(dot(transformedNormal.xyz,directionalVectorNew),uBaseLight);//scalar quantity as the light intensity
//		highp float quantity = max(dot(transformedNormal.xyz,directionalVectorNew),1.0);//scalar quantity as the light intensity

		highp vec3 directionalLightColor = vec3(1,1,1);//RGB intensity

		vNTimesEachRGB = ambientLight + (directionalLightColor * quantity);

	}

</script>

<script type='text/javascript'>

function initShaders(gl) {
	var fragmentShader = getShader(gl,"shader-fs");//プログラムをロードしてコンパイルして返す
	var vertexShader = getShader(gl,"shader-vs");//プログラムをロードしてコンパイルして返す




		//シェーダープログラムを作成
	var shaderProgram = gl.createProgram();
	gl.attachShader(shaderProgram,vertexShader);
	gl.attachShader(shaderProgram,fragmentShader);
	gl.linkProgram(shaderProgram);

	//シェーダープログラムを作成できない場合はアラートを表示
	if(!gl.getProgramParameter(shaderProgram,gl.LINK_STATUS)){
		alert("can't initialize the shader program");
		return null;
	}

	gl.useProgram(shaderProgram);//githubではdrawScene()内で実行

	return shaderProgram;
};

function getShader(gl,id){
	var shaderScript,theSource,currentChild,shader;

	shaderScript = document.getElementById(id);

	if(!shaderScript) {
		return null;
	}

	theSource = "";
	currentChild = shaderScript.firstChild;

	while(currentChild) {
		if(currentChild.nodeType == currentChild.TEXT_NODE){
			theSource += currentChild.textContent;
		}

		currentChild = currentChild.nextSibling;
	}

	if (shaderScript.type == "x-shader/x-fragment"){
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex"){
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		// 未知のシェーダータイプ
		PRINT_CAUTION.innerHTML+="Unknown shader type.The element type of shader program must be 'x-shader/x-vertex' or 'x-shader/x-fragment' now."+"<br>";
		return null;
	}

	gl.shaderSource(shader,theSource);

	//シェーダープログラムをコンパイル
	gl.compileShader(shader);

	//whether or not success to compileコンパイルが成功したかを確認
	if (!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
		alert("Shader compile error occured : " + id + " : " + gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
};


function getAttributeLocations(gl,prog){
	//get shader variable pointer

	//For example "aVertexPosition" is a variable in vertex shader.
	var locPosition = gl.getAttribLocation(prog,"aVertexPosition");gl.enableVertexAttribArray(locPosition);//githubではdrawScene()内で実行
	var locNormal = gl.getAttribLocation(prog,  "aVertexNormal");gl.enableVertexAttribArray(locNormal);
	var locColor = gl.getAttribLocation(prog,   "aVertexColor");gl.enableVertexAttribArray(locColor);
	var locTextcoord = gl.getAttribLocation(prog,"aTextureCoord");gl.enableVertexAttribArray(locTextcoord);

	return {
		position:locPosition,
		normal:locNormal,
		color:locColor,
		textcoord:locTextcoord
	};
};

function getUniformLocations(gl,prog){

	var vv;
	var locPerspective = gl.getUniformLocation(prog,"uProjectionMatrix");	if(!locPerspective){PRINT_CAUTION.innerHTML+="locPerspective is not used"+locPerspective+"<br>";}
	var locModelView = gl.getUniformLocation(prog, "uModelViewMatrix");	if(!locModelView){PRINT_CAUTION.innerHTML+="locModelView is not used"+locModelView+"<br>";}
	var locPointSize = gl.getUniformLocation(prog,  "uPointSizeFloat");	if(!locPointSize){PRINT_CAUTION.innerHTML+="locPointSize is not used"+locPointSize+"<br>";}
	var locSampler = gl.getUniformLocation(prog,    "uSampler");		if(!locSampler){PRINT_CAUTION.innerHTML+="locSampler is not used"+locSampler+"<br>";}
	var locModelViewMatrixInversedTansposed = gl.getUniformLocation(prog,"uModelViewMatrixInversedTransposed");	if(!locModelViewMatrixInversedTansposed){PRINT_CAUTION.innerHTML+="locModelViewMatrixInversedTansposed is notused"+locModelViewMatrixInversedTansposed+"<br>";}
//●
	var locBaseLight = gl.getUniformLocation(prog,"uBaseLight");vv="locBaseLight";if(!eval(vv)){PRINT_CAUTION.innerHTML+=vv+" is not used"+eval(vv)+"<br>";}


	var locManipulatedRotationMatrix = gl.getUniformLocation(prog,"uManipulatedRotationMatrix");	if(!locManipulatedRotationMatrix){PRINT_CAUTION.innerHTML+="locManipulatedRotationMatrix is not used"+locManipulatedRotationMatrix+"<br>";}
	var locBrightness = gl.getUniformLocation(prog,"uBrightness");	if(!locBrightness){PRINT_CAUTION.innerHTML+="locBrightness is not used"+locBrightness+"<br>";}
	var locAlpha = gl.getUniformLocation(prog,"uAlpha");		if(!locAlpha){PRINT_CAUTION.innerHTML+="locAlpha is not used"+locAlpha+"<br>";}

	return {
		perspective:locPerspective,
		modelView:locModelView,
		pointSize:locPointSize,
		sampler:locSampler,
		mvMIT:locModelViewMatrixInversedTansposed,
//●
		baseLight:locBaseLight,
		manipulatedRM:locManipulatedRotationMatrix,
		brightness:locBrightness,
		alpha:locAlpha
	};
};









//******************************** BUFFERS *******************************



function createBuffers(gl,shape){
	//生成したバッファをWebGLBufferにバインドしたら、
	//あとはそれにvertexのattributionをbufferDataを使って
	//頂点の座標、頂点の色、テキストデータなどをバッファに放り込むだけ

	//position to buffer
	var bufPositions = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,bufPositions);
	gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(shape.pos),gl.STATIC_DRAW);

	//normal vectors to buffer//●
	var buffNormal = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buffNormal);
	gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(shape.nor),gl.STATIC_DRAW);

	//color to buffer
	var buffColors = gl.createBuffer();//正方形のvertices
	gl.bindBuffer(gl.ARRAY_BUFFER,buffColors);
	gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(shape.col),gl.STATIC_DRAW);

	//texture position to buffer
	var buffTextureCoordinate = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buffTextureCoordinate);
	gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(shape.tex),gl.STATIC_DRAW);

	//indices to ELEMENT buffer
	var buffIndex = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,buffIndex);
	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(shape.ind),gl.STATIC_DRAW);

	return {
		position : bufPositions,
		texture : buffTextureCoordinate,
		normal : buffNormal,
		color : buffColors,
		index : buffIndex
	};
};

function asignBufferMapping(gl,oLocations,oBuffers){

	//usage of kinds of buffers when vertex shader reads them

	//** prepare common arguments **
	var type = gl.FLOAT;
	var normalize = false;
	var stride = 0;//shaderを呼び出すごとに進むバイト数//これは(buffer.slice((offset + i) * stride,size);)という意味
	var offset = 0;
	var numComponents;//number of column

	//positons
	gl.bindBuffer(gl.ARRAY_BUFFER,oBuffers.position);
	numComponents = 3;
	gl.vertexAttribPointer(oLocations.attribute.position,numComponents,type,normalize,stride,offset);

	//normal vector
	gl.bindBuffer(gl.ARRAY_BUFFER,oBuffers.normal);
	numComponents = 3;
	gl.vertexAttribPointer(oLocations.attribute.normal,numComponents,type,normalize,stride,offset);

	//color
	gl.bindBuffer(gl.ARRAY_BUFFER,oBuffers.color);
	numComponents = 4;
	gl.vertexAttribPointer(oLocations.attribute.color,numComponents,type,normalize,stride,offset);

	//texture
	gl.bindBuffer(gl.ARRAY_BUFFER,oBuffers.texture);
	numComponents = 2;
	gl.vertexAttribPointer(oLocations.attribute.textcoord,numComponents,type,normalize,stride,offset);

	//index
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,oBuffers.index);//arrayのとおりにデータを使うのでPointerはいらない。

//kkk why it is not necessary for index to gl.vertexAttribPointer?
//Is the usage of array fixed?

//this part below is not necessary for the elements of indices (It's already defined as array data structure.)
//	numComponents = 3;//列の数
//	gl.vertexAttribPointer(oLocations.index,numComponents,type,normalize,stride,offset);

};

//********************************** DATA FOR SHADER ****************************************



function sendPerspectiveMatrix(gl,oLocations){

	/*
		from cite site:
		Create a perspective matrix, a special matrix that is
		used to simulate the distortion of perspective in a camera.
		Our field of view is 45 degrees, with a (width/height)
		ratio that matches the display size of the canvas
		and we only want ot see objects between 0.1 units
		and 100 units away from the camera.
	*/
		//perspective matrix...myMat4 was already defined at global scope
//	var fieldOfView = 70 * Math.PI / 180;	//in radian;
	var fieldOfView = 70 * Math.PI / 180;	//in radian;
	var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
	var zNear = 0.1;
	var zFar = 10000000.0;

	//create a projectionMatrix array as the perspective matrix
	var projectionMatrix=new Array(16);
	myMat4.loadPerspective(fieldOfView,aspect,zNear,zFar);
	projectionMatrix = myMat4.arr;

	//uniform mat4 uProjectionMatrixへ値を転送
	gl.uniformMatrix4fv(oLocations.uniform.perspective,false,new Float32Array(projectionMatrix));

	return projectionMatrix;
};


function sendModelViewMatrix(gl,oLocations,arrAccumelationToMyMat4,angle){
	//@param {Array} aMVMatrices model view matrix in Array
		//Set the shader uniforms culclated above and something

	myMat4.loadIdentity();//initialize accumelator of matrix to compute

	for(var ii=0,len=arrAccumelationToMyMat4.length;ii<len;ii++){
		arrAccumelationToMyMat4[ii](angle);
	}
	var mvMat = myMat4.arr;

	//uniform mat4 uModelViewMatrixへ値を転送
	gl.uniformMatrix4fv(oLocations.uniform.modelView,false,new Float32Array(mvMat));

	return mvMat;//for inversing and transposing in another 'send' function
};

/**
 *各面の法線ベクトルの向きを更新＆拡大縮小にともなうずれを修正してくれる便利なベクトルをシェーダーに送る。
 *send a matrix which rotates and translate normal vector and which makes the direction of normal vectors correct,especially when magnifiring was done to its body
*/
function sendModelViewMatrixInversedTransposed(gl,oLocations,mvMatrix){

	//compute matrix
	myMat4.load(mvMatrix);
	myMat4.inverse();
	myMat4.transpose();
			//https://msdn.microsoft.com/ja-jp/library/ms810476.aspx
			//	says the reason 'inverse & transpose' above

	//uniform highp mat4 umvMatrixITに値を転送
	gl.uniformMatrix4fv(oLocations.uniform.mvMIT,false,new Float32Array(myMat4.arr));
};
//●-
function sendBaseLight(gl,oLocations,fNumber){//移動修正したあとのnormalに影響を与えるためのマトリックスをsendする send a matrix to affect each normals after having been multiplied by inversingTransposing matrix
	gl.uniform1f(oLocations.uniform.baseLight,fNumber);
};
//-●
function sendSampler(gl,oLocations,number){
	//uniform float uPointSizeFloatへ値を転送
	gl.uniform1i(oLocations.uniform.sampler,number);
};
function sendPointSize(gl,oLocations,nSize){
	//uniform float uPointSizeFloatへ値を転送
	gl.uniform1f(oLocations.uniform.pointSize,nSize);
};

function sendManipulatedRotationOnly(gl,oLocations,arrAccumelationToMyMat4,angle){//ライトの位置を視点の回転と共に移動させる

	myMat4.loadIdentity();
	for(var ii=0,len=arrAccumelationToMyMat4.length;ii<len;ii++){
		arrAccumelationToMyMat4[ii](angle);
	}
	gl.uniformMatrix4fv(oLocations.uniform.manipulatedRM,false,new Float32Array(myMat4.arr));
};

function sendBrightness(gl,oLocations,nValue){
	//uniform float uPointSizeFloatへ値を転送
	gl.uniform1f(oLocations.uniform.brightness,nValue);
};
function sendAlpha(gl,oLocations,nValue){
	//uniform float uPointSizeFloatへ値を転送
	gl.uniform1f(oLocations.uniform.alpha,nValue);
};


//************************************** DRAW SCENE *************************************************


function drawScene(gl,oShaderInfo,angle){

	// カラーバッファや深度バッファをクリアする
	//Clear the canvas before we start drawing on it

	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	var vertexOffset = 0;//このoffsetは頂点のx,y,zごとに進むので、データ的にはoffset*3(4?)ごとに進む
	var nPointSize = 3.0;

	var member,mvmat,pmat;
	for(var ii=0;ii<UnitsToDraw.length;ii++){
		member = UnitsToDraw.getMemberByIndex(ii);
		asignBufferMapping(gl,oShaderInfo.locations,member.buffers);//attribute variables are allocated before,change the buffers
		pmat = sendPerspectiveMatrix(gl,oShaderInfo.locations);
		mvmat = sendModelViewMatrix(gl,oShaderInfo.locations,member.aAccumeUnits,angle);
		sendModelViewMatrixInversedTransposed(gl,oShaderInfo.locations,mvmat);

//●
		sendBaseLight(gl,oShaderInfo.locations,member.baseLight);


		sendPointSize(gl,oShaderInfo.locations,nPointSize);
		sendSampler(gl,oShaderInfo.locations,0);//kkk Is last argument unit number?
		sendManipulatedRotationOnly(gl,oShaderInfo.locations,member.aAccumeUnitsLight,angle);
		sendBrightness(gl,oShaderInfo.locations,member.brightness);
		sendAlpha(gl,oShaderInfo.locations,member.alpha);
		myTextures.member[member.nameTexture].activate();
		member.draw();//in which texture activated is for use
		member.labels.repos(gl,pmat,mvmat);
	}
};


//*************************************** START ****************************************************************	
//start
function start(){

	//** prepare gl canvas **//
	var canvas = document.getElementById('glcanvas');
	canvas.width=canvas.clientWidth;//necessary
	canvas.height=canvas.clientHeight;//necessary
	var gl=canvas.getContext("webgl");
	if(!gl){
		alert('Unable to initialize WebGL.Your browser or machine may not support it.');
		return;
	}
	gl.viewport(0,0,gl.canvas.width,gl.canvas.height);//(kkk bad)クリップ空間の-1～1の値をcanvasの大きさに変換する
	gl.clearColor(0.0, 0.0, 0.0, 1.0);	//Clear to black,fully opaque
	gl.clearDepth(1.0);			//Clear everything
	gl.enable(gl.DEPTH_TEST);		//Enable depth testing	    		// 深度テストを有効化
	gl.depthFunc(gl.LEQUAL);		//Near things obscure far things	// 近くにある物体は、遠くにある物体を覆い隠す
{
	//https://stackoverflow.com/questions/47216022/webgl-gl-fragcolor-alpha-behave-differently-in-chrome-with-firefox
	//i've been thanking David Guan
	gl.enable(gl.BLEND);
	gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
};
	//** rectangle test **
	//{
	//	gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
	//    gl.enable(gl.SCISSOR_TEST);
	//   gl.scissor(30, 10, 60, 60);//60x60の正方形
	//    gl.clearColor(1.0, 1.0, 0.0, 1.0);
	//    gl.clear(gl.COLOR_BUFFER_BIT);
	//};


	//** prepare shaders **/
	var shaderProgram = initShaders(gl);
	var oAttributeLocations	= getAttributeLocations(gl,shaderProgram);
	var oUniformLocations	= getUniformLocations(gl,shaderProgram);
	var oShader = {
		program	: shaderProgram,
		locations:{
			attribute : oAttributeLocations,
			uniform	: oUniformLocations
		}
	};


	//** prepare textures **
	var nameTextureSun = "sun";
	myTextures.join(gl,nameTextureSun);
	var nameTextureBase = "earth";
	myTextures.join(gl,nameTextureBase);
	var nameTextureMoon = "moon";
	myTextures.join(gl,nameTextureMoon);
	var nameTextureJupiter = "jupiter";
	myTextures.join(gl,nameTextureJupiter);
	var nameTextureUranus = "uranus";
	myTextures.join(gl,nameTextureUranus);
	var nameTextureVenus = "venus";
	myTextures.join(gl,nameTextureVenus);
	var nameTextureMars = "mars";
	myTextures.join(gl,nameTextureMars);
	var nameTextureNeptune = "neptune";
	myTextures.join(gl,nameTextureNeptune);
	var nameTextureMercury = "mercury";
	myTextures.join(gl,nameTextureMercury);





	var nameTextureAtomosphere = "white";
//issue	myTextures.create(gl,nameTextureAtomosphere,myColorName.white(0.5));//preserve alpha here
	myTextures.join(gl,nameTextureAtomosphere);







	var _front_=true;
	var _frontLength_ = 60;




	/* class & instances */
	(function(){
		var mag = 0.001;
		Ball = function(radius){
			this.radiusSurface = radius;
		};
		Object.defineProperty(Ball.prototype,'radius',{get:function(){return mag*this.radiusSurface;},enumerable:true,configurable:false});
	})();
	var sun		= new Ball(695508);
	var jupiter	= new Ball(71492);
	var saturn	= new Ball(60268);
	var uranus	= new Ball(25559);
	var neptune	= new Ball(24764);
	var earth	= new Ball(6378);
	var venus	= new Ball(6051);
	var mars	= new Ball(3396);
	var mercury	= new Ball(2439);
	var moon	= new Ball(1738);
	var pluto	= new Ball(1195);




	/** common **/
	var brightnessCommon = 1.0;
	var brightnessAtomosphere = 1.0;
	var alphaCommon = 1.0;
	var alphaAtomosphere = 0.3;
//●-
	var baseLight = 0.0;
	var baseLightSun = 1.0;
//-●

	var colorNameText = myColorName.blue(0.5);

		//plane
	var xyzCenter = myXYZManipulation.createMember();
	var aAccumeUnits = [];
	if(_front_){
		aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));
		var labels = new myClass.Labels();
		labels.addText(0,-1,0,"ship",colorNameText);
	} else {
		aAccumeUnits.push(AccumeMotions.translate(0,0,10));
		var labels = new myClass.Labels();
		labels.addText(0,-5,0,"",colorNameText);
	};
	var shape = myGLShape.hexa(gl);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureBase,[],brightnessCommon,alphaCommon,baseLight);




	/** for Sun **/
	var aAccumeLightingSun = [];
	aAccumeLightingSun.push(AccumeMotions.gotoOrigin());


		//Sun
	var r = sun.radius;
	var xyzSun = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));
////●	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));

	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyzSun));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));

	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));
						//	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,    1,-1,0));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));//center : sun
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,-5,0,"Sun",colorNameText);
//	var shape = myGLShape.hexa(gl);
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureSun,aAccumeLightingSun,brightnessCommon,alphaCommon,baseLightSun);


	/** common **/
	var aAccumeLighting = [];
	aAccumeLighting.push(AccumeMotionsXYZ.replaceViewNotTrans(xyzCenter));


		//Earth
	var r = earth.radius;
	var xyzEarth = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));

//	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyzEarth));//revolution公転
//	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));

	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));
						//	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,    1,-1,0));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));//center : sun
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,-5,0,"Earth",colorNameText);
//	var shape = myGLShape.hexa(gl);
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureBase,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);




	/** Atomosphere of Earth **/
	//not texture but color
	var r = earth.radius*1.05;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));
//	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyzEarth));//revolution公転
//	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));
						//	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,    1,-1,0));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));//center : sun
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,-5,0,"",colorNameText);
//	var shape = myGLShape.hexa(gl);
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureAtomosphere,aAccumeLighting,brightnessAtomosphere,alphaAtomosphere);





	/** Jupiter **/
	var r = jupiter.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,"Jupitor",colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureJupiter,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);



	/** Moon **/
	var r = moon.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,nameTextureMoon,colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureMoon,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);


	/** Uranus **/
	var r = uranus.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,nameTextureUranus,colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureUranus,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);


	/** Venus **/
	var r = venus.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,nameTextureVenus,colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureVenus,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);


	/** Mars **/
	var r = mars.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,nameTextureMars,colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureMars,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);


	/** Neptune **/
	var r = neptune.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,nameTextureNeptune,colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureNeptune,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);


	/** Mercury **/
	var r = mercury.radius;
	var xyz = myXYZTrigonometry.createMember();
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotions.rotate(1,0,0,0,90));//rotation自転
	aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
	aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
	aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
	if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
						//	aAccumeUnits.push(AccumeMotions.axisY(1));
						//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
						//	aAccumeUnits.push(AccumeMotions.none());
	var labels = new myClass.Labels();
	labels.addText(0,0,0,nameTextureMercury,colorNameText);//kkk
	var shape = myGLShape.sphere(gl,r);
	UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureMercury,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);




	/** satellite thrown in various random directions **/
/*
	for(var hh=0;hh<10;hh++){
		var r = moon.radius;
		var xyz = myXYZTrigonometry.createMember();
		var aAccumeUnits = [];
		aAccumeUnits.push(AccumeMotions.rotate(0,1,0,1,0));//rotation自転
			aAccumeUnits.push(AccumeMotionsXYZ.trans(xyz));//revolution公転
			aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
			if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));//seen from the distance
							//	aAccumeUnits.push(AccumeMotions.axisY(1));
							//	aAccumeUnits.push(AccumeMotions.translate(0,0,-50));
							//	aAccumeUnits.push(AccumeMotions.none());
		var labels = new myClass.Labels();
		labels.addText(0,0,0,hh.toString(),colorNameText);//kkk
		var shape = myGLShape.sphere(gl,r);
		UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureAsteroid,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);
	};

*/


	/* These two kinds of objects below must always be lighten from right angle ,so that they are lighten most brightly*/

	/** common variables**/
	var aAccumeLighting = [];
	aAccumeLighting.push(AccumeMotions.translate(1.0,1.0,1.0));//Light is put at (1 1 1)
	aAccumeLighting.push(AccumeMotionsXYZ.replaceViewNotTrans(xyzCenter));//always (1 1 1) as same relationship of positionning


	//stars far from planet
	var spread=100;
	var p1,r1,t1;
	for(var hh=0;hh<100;hh++){
		var aAccumeUnits=[];
		aAccumeUnits.push(AccumeMotionsXYZ.replaceView(xyzCenter));
		if(_front_)aAccumeUnits.push(AccumeMotions.translate(0,0,-_frontLength_));
		var labels = new myClass.Labels();
		//labels.addText(0,0,-10,"hexa",colorNameText);
		r1 = 1000*Math.random()+1000;
		t1 = 3.141592653*2*Math.random();
		t2 = 3.141592653*Math.random()-1.5707963265;
		r2 = r1*Math.cos(t2);
		p1 = new myClass.Point(r2*Math.cos(t1),r2*Math.sin(t1),r1*Math.sin(t2));
		var shape = myGLShape.point(gl,p1,myColorName.purple(1));
		UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureBase,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);
	}


	/** x,y,z axes **/
	var aAccumeUnits = [];
	aAccumeUnits.push(AccumeMotionsXYZ.replaceViewNotTrans(xyzCenter));
	aAccumeUnits.push(AccumeMotions.translate(-30,-15,-30));
	var labels = new myClass.Labels();
	labels.addText(0,0,5,"back",colorNameText);
	var shape = myGLShape.line(gl,new myClass.Point(0,0,0),new myClass.Point(0,0,5),myColorName.magenta(1));
		UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureBase,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);
	var labels = new myClass.Labels();
	labels.addText(0,5,0,"up",colorNameText);
	var shape = myGLShape.line(gl,new myClass.Point(0,0,0),new myClass.Point(0,5,0),myColorName.magenta(1));
		UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureBase,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);
	var labels = new myClass.Labels();
	labels.addText(5,0,0,"right",colorNameText);
	var shape = myGLShape.line(gl,new myClass.Point(0,0,0),new myClass.Point(5,0,0),myColorName.magenta(1));
		UnitsToDraw.join(gl,shape,aAccumeUnits,labels,nameTextureBase,aAccumeLighting,brightnessCommon,alphaCommon,baseLight);



//********************************************** animation ****************************************************	
	var timeBefore=0;
	var angle=0;
	var dt;
	function render(timeStamp){
		dt = timeStamp - timeBefore;
		if(dt>10){
			angle+=dt/16;
			//if(angle>360)angle=0;
			PRINT_INFO.innerText=angle.toString();
			myXYZTrigonometry.reposAll(dt);
			myXYZManipulation.move(dt);
//			drawScene(gl,oShader,aModels,angle);
			drawScene(gl,oShader,angle);
			timeBefore = timeStamp;
		}
		window.requestAnimationFrame(render);
	}
	window.requestAnimationFrame(render);
};//start


//**************************** 3D DRAW with MOVING, LIGHTING, TEXTURING, COLORING and so on *************************************************


/* all the things to be wanted to draw must be thrown into 'oModel',e.g. shape or text with its position x,y,z*/
(function(){


	//
	//@param {myGLShape.obj} shape in which there are points,color,normal vector,indeces and so on
	//
	var ToolBox = function(gl,shape,aMotions,aLabels,sNameTexture,aLights,brightness,alpha,fBaseLight){//f means float
		this.draw = shape.draw;
		this.buffers = createBuffers(gl,shape);
		this.aAccumeUnits = aMotions;
		this.labels = aLabels;
		this.nameTexture = sNameTexture;

		this.aAccumeUnitsLight = aLights;
		this.brightness = brightness;
		this.alpha = alpha;

		this.baseLight = fBaseLight;
	};

	var aModels = [];

	UnitsToDraw = { };
	Object.defineProperty(UnitsToDraw,'join',{value:create,writable:false,enumerable:true,configurable:false});	
	function create(gl,shape,aMotions,aLabels,sNameTexture,aLightMotions,brightness,alpha,fBaseLight){
		aModels.push(new ToolBox(gl,shape,aMotions,aLabels,sNameTexture,aLightMotions,brightness,alpha,fBaseLight));
	}
	Object.defineProperty(UnitsToDraw,'getMemberByIndex',{value:function(num){return aModels[num];},writable:false,enumerable:true,configurable:false});
	Object.defineProperty(UnitsToDraw,'length',{get:function(){return aModels.length;},enumerable:true,configurable:false});
})();//UnitsToDraw

</script>

</head><body style="overflow:hidden;" onload="start();"><div>
<h3 style="offset:0px;">Animating objects with WebGL</h3>
<h5 style="offset:0px;">using gl.TRIANGLES mode to draw and not using gl.ELEMENT_ARRAY_BUFFER mode to buffer</h5>
<p class="info" style="position:relative;top:0px;left:0px;color:black;font-size:30px:offset:0px">cite site:<a href="https://developer.mozilla.org/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL">MDN web docs moz://a(click next page)</a></p>
<p class="info" style="position:relative;top:0px;left:0px;color:black;font-size:30px:offset:0px">cite site:<a href="https://webglfundamentals.org/webgl/lessons/webgl-drawing-multiple-things.html">WebGLFundamentals</a></p>
<div id="canvasContainer">
<canvas id="glcanvas" style="position:relative;top:0px;left:0px;background-color:black;width:840px;height:480px;"></canvas>
</div>
<p id="PRINT_INFO" style="position:relative;top:0px;left:0px:offset:0px"></p>
<p id="PRINT_CAUTION" style="position:absolute;top:0px;left:0px;color:blue;font-size:8px;line-height:8px;offset:0px;background-color:transparent;"></p>
</div></body></html>

